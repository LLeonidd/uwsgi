[uwsgi]

app             = app_name            ; Переменная названия приложения

chdir           = %d                  ; Корневая папка проекта (полный путь)
module          = %(app).wsgi         ; Django wsgi файл
#home            = /path/to/env      ; полный путь к виртуальному окружению

master          = true                ; разрешить запуск мастер-процесса
processes       = 10                  ; максимальное количество воркеров

socket          = %d/sockets/uwsgi.sock ; полный путь к файлу сокета
chmod-socket    = 666                   ; права доступа к файлу сокета
vacuum          = true                  ; чистить окружение от служебных файлов uwsgi по завершению
plugins         = python3               ; плагин интерпретатора


#disable-logging = true               ; Отключение встроенного логирования
#log-4xx         = true               ; но включение для 4xx
#log-5xx         = true               ; и 5xx
daemonize       = %d/%(app).log       ; работать в фоне, логи писать по пути..

pidfile         =%d/%(app).pid        ; создает файл с идентификатором pid процесса
need-app        = true                ; запуск при отсутствии ошибок в модуле приложения
    
enable-threads  = true                ; Включить потоки для python
threads         = 10                  ; Кол-во потоков

harakiri        = 30                  ; Уничтожать  зависших воркеров через 30 сек
py-call-osafterfork = true            ; Разрешить workers получать сигналы ОС
offload-threads = 1

#Идентификация процесса и воркеров в диспетчере процессов
auto-procname = true
procname-prefix = %(app)_             ; Префикс для воркера в диспетчере задач


#max-requests = 1000                  ; Перезапуск workers после этого количества запросов
#max-worker-lifetime = 3600           ; Перезапуск workers через указанного количества секунд
#reload-on-rss = 2048                 ; Перезапуск workers после потребление указанного количества памяти
#worker-reload-mercy = 60             ; Время ожидания перед удалением workers
#cheaper-algo = busyness
#processes = 128                      ; Разрешенное максимальное количество workers
#cheaper = 8                          ; Минимальное количество  worker
#cheaper-initial = 16                 ; Workers созданные во время старта
#cheaper-overload = 1                 ; Продолжительность цикла в секундах
#cheaper-step = 16                    ; Количество workers при из порождение
#cheaper-busyness-multiplier = 30     ; Сколько циклов ждать, прежде чем убивать workers
#cheaper-busyness-min = 20            ; Ниже этого порога убивать workers (если стабильно для множителя циклов)
#cheaper-busyness-max = 70            ; Выше этого порога порождать новых workers
#cheaper-busyness-backlog-alert = 16  ; Порождать аварийных workers, если в очереди ожидает больше этого количества запросов
#cheaper-busyness-backlog-step = 2    ; Количество аварийных workers, если в очереди слишком много запросов#

