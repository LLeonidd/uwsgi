[uwsgi]
# Переменная названия приложения
app             = app_name           
# Корневая папка проекта (полный путь)
chdir           = %d                  
# Django wsgi файл
module          = %(app).wsgi
# полный путь к виртуальному окружению     
#home            = /path/to/env      

# разрешить запуск мастер-процесса
master          = true
# максимальное количество воркеров
processes       = 10
# полный путь к файлу сокета
socket          = %dsockets/uwsgi.sock 
# права доступа к файлу сокета
chmod-socket    = 666
# чистить окружение от служебных файлов uwsgi по завершению
vacuum          = true

plugins         = python3


#disable-logging = true               # Отключение встроенного логирования
#log-4xx         = true               # но включение для 4xx
#log-5xx         = true               # и 5xx
# работать в фоне, логи писать по пути..
daemonize       = %d%(app).log       
# создает файл с идентификатором pid процесса
pidfile         =%d%(app).pid        
# запуск при отсутствии ошибок в модуле приложения
need-app        = true               
# Включить потоки для python
enable-threads  = true                
# Кол-во потоков
threads         = 10                  
# Уничтожать  зависших воркеров через 30 сек
harakiri        = 30                  
# Разрешить workers получать сигналы ОС
py-call-osafterfork = true            
offload-threads = 1

#Идентификация процесса и воркеров в диспетчере процессов
auto-procname = true
# Префикс для воркера в диспетчере задач
procname-prefix = %(app)_             


#max-requests = 1000                  # Перезапуск workers после этого количества запросов
#max-worker-lifetime = 3600           # Перезапуск workers через указанного количества секунд
#reload-on-rss = 2048                 # Перезапуск workers после потребление указанного количества памяти
#worker-reload-mercy = 60             # Время ожидания перед удалением workers
#cheaper-algo = busyness
#processes = 128                      # Разрешенное максимальное количество workers
#cheaper = 8                          # Минимальное количество  worker
#cheaper-initial = 16                 # Workers созданные во время старта
#cheaper-overload = 1                 # Продолжительность цикла в секундах
#cheaper-step = 16                    # Количество workers при из порождение
#cheaper-busyness-multiplier = 30     # Сколько циклов ждать, прежде чем убивать workers
#cheaper-busyness-min = 20            # Ниже этого порога убивать workers (если стабильно для множителя циклов)
#cheaper-busyness-max = 70            # Выше этого порога порождать новых workers
#cheaper-busyness-backlog-alert = 16  # Порождать аварийных workers, если в очереди ожидает больше этого количества запросов
#cheaper-busyness-backlog-step = 2    # Количество аварийных workers, если в очереди слишком много запросов#

